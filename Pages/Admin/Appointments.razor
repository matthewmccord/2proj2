@*View Appointments Page:
    This page will list out all of the appointments
    that have been made. Each appointment should have
    an option to Edit or Delete that appointment.*@



<!--@page "/admin/appointments"
@page "/admin"
@inherits OwningComponentBase<IAppointmentRepository>

<table class="table table-sm table-striped table-bordered">

    <thead>
        <tr>
            <th>Date</th>
            <th>Time (MDT)</th>
            <th>Group</th>
            <th>Details</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>

    <tbody>

        @if (AppointmentData?.Count() > 0)
        {
            //list the appointments
            @foreach (Appointment a in AppointmentData)
            {
                <tr>
                    <td>@a.Date</td>
                    <td>@a.Time</td>
                    <td>@a.Group</td>

                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(a.AppointmentId)">Details</NavLink>
                    </td>
                    <td>
                        <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(a.AppointmentId)">Edit</NavLink>
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(x => RemoveAppointment(a))">Delete</button>
                    </td>

                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Appointments</td>
            </tr>
        }
    </tbody>


</table>-->

@*<NavLink class="btn btn-primary" href="/admin/appointments/create">Create</NavLink>*@


<!--@code
{
    public IAppointmentRepository repo => Service;
    public IEnumerable<Appointment> AppointmentData { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        AppointmentData = await repo.Appointments.ToListAsync();
    }

    public string GetDetailsUrl(long id) => $"/admin/appointments/details/{id}";
    public string GetEditUrl(long id) => $"/admin/appointments/edit/{id}";

    public async Task RemoveBook(Models.Appointment a)
    {
        repo.DeleteAppointment(a);
        await UpdateData();
    }

}-->
